#!/usr/bin/env ruby

require 'ffi'
require 'nokogiri'
require 'pp'

system 'gcc -c -fPIC netfpga-regset.c'                     unless File.exists? 'netfpga-regset.o'
system 'gcc -shared -o netfpga-regset.so netfpga-regset.o' unless File.exists? 'netfpga-regset.so'

module NetFPGA
  extend FFI::Library
  ffi_lib './netfpga-regset.so'
  attach_function :get_register, [:uint],        :uint
  attach_function :set_register, [:uint, :uint], :void
end

config = {}

Nokogiri::XML(File.read ARGV.first).xpath('/interfaces/interface').each do |interface|
  phases = interface.xpath('SchedulerXENFPG/PhaseLength').map do |phase_length|
    [phase_length.attr('pi'), phase_length.text.to_i]
  end

  silent_length = interface.xpath('SchedulerXENFPG/Cyclelength').first.text.to_i - phases.map(&:last).inject(:+)

  phases << ['silent', silent_length] if silent_length > 0

  config[interface.attr 'name'] = {
    local: interface.xpath('LinkLayerMACTransmitter/MACSourceAddress').first.text,
    other: interface.xpath('LinkLayerMACTransmitter/MACDestinationAddress').first.text,
    phases: phases,
  }
end

$regvals = Hash[File.read(ARGV.last).scan(/^#define\s+(\S+)\s+(\S+)$/).map do |reg, val|
  [
    reg,
    case val
    when /^\d+$/          then val.to_i
    when /^0x[0-9a-f]+$/i then val.to_i 16
    else                       val
    end
  ]
end]

pp config

def NetFPGA.set_register reg, val
  puts "setting #{$regvals.invert[reg]} to val #{val}"
end unless File.exists? '/sys/class/net/nf2c0'

config.each do |eth, params|
  i = eth[/\d$/].to_i

  local = params[:local].split(':').map { |hh| hh.to_i 16 }
  other = params[:other].split(':').map { |hh| hh.to_i 16 }

  NetFPGA.set_register $regvals["MAC_RXTX_#{i}_LOCAL_MAC_HI_REG"], local[0] << 8 | local[1]
  NetFPGA.set_register $regvals["MAC_RXTX_#{i}_LOCAL_MAC_LO_REG"], local[2] << 24 | local[3] << 16 | local[4] << 8 | local[5]
  NetFPGA.set_register $regvals["MAC_RXTX_#{i}_OTHER_MAC_HI_REG"], other[0] << 8 | other[1]
  NetFPGA.set_register $regvals["MAC_RXTX_#{i}_OTHER_MAC_LO_REG"], other[2] << 24 | other[3] << 16 | other[4] << 8 | other[5]

  NetFPGA.set_register $regvals["SCHEDULER_#{i}_NUM_PHASES_REG"], params[:phases].size

  type_numbers = { 'silent' => 0, 'QoS' => 1, 'CAN' => 2, 'DSS' => 3, 'MGT' => 4 }
  params[:phases].each.with_index do |(type, length), ph|
    NetFPGA.set_register $regvals["SCHEDULER_#{i}_PH_#{ph+1}_TYPE_REG"],   type_numbers[type]
    NetFPGA.set_register $regvals["SCHEDULER_#{i}_PH_#{ph+1}_LENGTH_REG"], length
  end
end
